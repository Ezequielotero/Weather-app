{"version":3,"sources":["components/Card.jsx","components/Cards.jsx","components/SearchBar.jsx","components/Nav.jsx","components/Ciudad.jsx","App.js","index.js"],"names":["Card","min","max","name","img","onClose","id","className","onClick","to","src","width","height","alt","Cards","cities","map","c","SearchBar","onSearch","useState","city","setCity","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","Nav","Ciudad","temp","weather","wind","clouds","latitud","longitud","App","setCities","fetch","process","then","r","json","recurso","undefined","main","Math","round","temp_min","temp_max","icon","speed","all","coord","lat","lon","aux","filter","ci","length","Swal","title","text","footer","timer","onFilter","ciudadId","ciudad","parseInt","path","render","exact","match","params","ReactDOM","document","getElementById"],"mappings":"wWAIe,SAASA,EAAT,GAAoD,IAApCC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,IAAKC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,QAASC,EAAK,EAALA,GACzD,OACE,yBAAKC,UAAU,QACb,yBAAKD,GAAG,YAAYC,UAAU,OAC1B,4BAAQC,QAASH,EAASE,UAAU,yBAApC,MAEJ,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAME,GAAE,kBAAaH,IACrB,wBAAIC,UAAU,cAAcJ,IAE5B,yBAAKI,UAAU,OACb,yBAAKA,UAAU,8BACb,wCACA,2BAAIN,EAAJ,SAEF,yBAAKM,UAAU,8BACb,wCACA,2BAAIL,EAAJ,SAEF,yBAAKK,UAAU,8BACb,yBAAKA,UAAU,aAAaG,IAAK,oCAAoCN,EAAI,UAAWO,MAAM,KAAKC,OAAO,KAAKC,IAAI,S,MCpB9G,SAASC,EAAT,GAAmC,IAAnBC,EAAkB,EAAlBA,OAAQV,EAAU,EAAVA,QACrC,OAAGU,EAEC,yBAAKR,UAAU,SACZQ,EAAOC,KAAI,SAAAC,GAAC,OAAI,kBAACjB,EAAD,CACbE,IAAKe,EAAEf,IACPD,IAAKgB,EAAEhB,IACPE,KAAMc,EAAEd,KACRC,IAAKa,EAAEb,IACPC,QAAS,kBAAMA,EAAQY,EAAEX,KACzBA,GAAIW,EAAEX,SAMZ,yBAAKC,UAAU,SAAf,iO,MClBS,SAASW,EAAT,GAAgC,IAAZC,EAAW,EAAXA,SAAW,EACpBC,mBAAS,IADW,mBACrCC,EADqC,KAC/BC,EAD+B,KAE5C,OACE,0BAAMf,UAAU,OAChBgB,SAAU,SAACC,GACTA,EAAEC,iBACFN,EAASE,KAET,2BAAOd,UAAU,OACfmB,KAAK,OACLC,YAAY,YACZC,MAAOP,EACPQ,SAAU,SAAAL,GAAC,OAAIF,EAAQE,EAAEM,OAAOF,UAElC,2BAAQrB,UAAU,QAAQmB,KAAK,SAASE,MAAM,a,MCSnCG,MAjBd,YAA0B,IAAZZ,EAAW,EAAXA,SACb,OACE,yBAAKZ,UAAU,OACb,kBAAC,IAAD,CAAME,GAAG,KACP,0BAAMF,UAAU,kBAGlB,yBAAKA,UAAU,aAEf,yBAAKA,UAAU,QACb,kBAACW,EAAD,CACEC,SAAUA,EAAUZ,UAAU,iB,aCjB3B,SAASyB,EAAT,GAAyB,IAARX,EAAO,EAAPA,KAC5B,OAAKA,EAGD,yBAAKd,UAAU,UACP,yBAAKA,UAAU,aACX,4BAAKc,EAAKlB,MACV,yBAAKI,UAAU,QACX,yDAAqBc,EAAKY,KAA1B,UACA,mDAAeZ,EAAKa,SACpB,oDAAgBb,EAAKc,KAArB,SACA,yDAA0Bd,EAAKe,QAC/B,qDAAiBf,EAAKgB,QAAtB,QACA,sDAAkBhB,EAAKiB,SAAvB,WAZD,kD,qBCOR,SAASC,IAAO,IAAD,EACCnB,mBAAS,IADV,mBACpBL,EADoB,KACZyB,EADY,KAE5B,SAASrB,EAASE,GAChBoB,MAAM,qDAAD,OAAsDpB,EAAtD,kBAAoEqB,mCAApE,kBACFC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAACG,GACL,QAAoBC,IAAjBD,EAAQE,KAAmB,CAC5B,IAAM3B,EAAO,CACXpB,IAAKgD,KAAKC,MAAMJ,EAAQE,KAAKG,UAC7BjD,IAAK+C,KAAKC,MAAMJ,EAAQE,KAAKI,UAC7BhD,IAAK0C,EAAQZ,QAAQ,GAAGmB,KACxB/C,GAAIwC,EAAQxC,GACZ6B,KAAMW,EAAQX,KAAKmB,MACnBrB,KAAMa,EAAQE,KAAKf,KACnB9B,KAAM2C,EAAQ3C,KACd+B,QAASY,EAAQZ,QAAQ,GAAGc,KAC5BZ,OAAQU,EAAQV,OAAOmB,IACvBlB,QAASS,EAAQU,MAAMC,IACvBnB,SAAUQ,EAAQU,MAAME,KAEtBC,EAAI5C,EAAO6C,QAAO,SAAAC,GAAE,OAAIA,EAAGvD,KAAMe,EAAKf,MACtCS,EAAO+C,SAASH,EAAIG,OACtBC,IAAK,CACHV,KAAM,QACNW,MAAO,UACPC,KAAM,yCACNC,OAAQ,2CAGV1B,EAAU,GAAD,mBAAMmB,GAAN,CAAWtC,KACtB0C,IAAK,CACHC,MAAM,YACNC,KAAK5C,EAAKlB,KAAM,2BAChBkD,KAAK,UACLc,MAAM,YAGRJ,IAAK,CACHV,KAAM,QACNW,MAAO,UACPC,KAAM,sCACNC,OAAQ,6CAKd,SAAS7D,EAAQC,GACfkC,EAAUzB,EAAO6C,QAAO,SAAA3C,GAAC,OAAIA,EAAEX,KAAOA,MAE1C,SAAS8D,EAASC,GAChB,IAAIC,EAASvD,EAAO6C,QAAO,SAAA3C,GAAC,OAAIA,EAAEX,KAAOiE,SAASF,MAClD,OAAGC,EAAOR,OAAS,EACRQ,EAAO,GAEP,KAIf,OACE,yBAAK/D,UAAU,OACb,6BACA,kBAAC,IAAD,CACEiE,KAAK,IACLC,OAAQ,kBAAM,kBAAC,EAAD,CAAKtD,SAAUA,QAE/B,6BACA,kBAAC,IAAD,CACEuD,OAAK,EAACF,KAAK,IACXC,OAAQ,kBAAM,kBAAC3D,EAAD,CAAOT,QAASA,EAASU,OAAQA,QAEjD,6BACA,kBAAC,IAAD,CACJ2D,OAAK,EAACF,KAAK,oBACXC,OAAQ,gBAAEE,EAAF,EAAEA,MAAF,OAAa,kBAAC3C,EAAD,CAAQX,KAAM+C,EAASO,EAAMC,OAAOP,iBC9E3DQ,IAASJ,OACL,kBAAC,IAAD,KACE,kBAAClC,EAAD,OAEFuC,SAASC,eAAe,W","file":"static/js/main.b5096e4d.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css';\nimport { Link } from 'react-router-dom';\n\nexport default function Card ({min, max, name, img, onClose, id}) {\n    return (\n      <div className=\"card\">\n        <div id=\"closeIcon\" className=\"row\">\n            <button onClick={onClose} className=\"btn btn-sm btn-danger\">X</button>\n        </div>\n        <div className=\"card-body\">\n          <Link to={`/ciudad/${id}`}>\n          <h5 className=\"card-title\">{name}</h5>\n          </Link>\n          <div className=\"row\">\n            <div className=\"col-sm-4 col-md-4 col-lg-4\">\n              <p>Min‚ùÑ</p>\n              <p>{min}¬∞</p>\n            </div>\n            <div className=\"col-sm-4 col-md-4 col-lg-4\">\n              <p>Max‚òÄ</p>\n              <p>{max}¬∞</p>\n            </div>\n            <div className=\"col-sm-4 col-md-4 col-lg-4\">\n              <img className=\"iconoClima\" src={\"http://openweathermap.org/img/wn/\"+img+\"@2x.png\"} width=\"80\" height=\"80\" alt=\"\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n};\n","import React from 'react';\r\nimport Card from './Card.jsx';\r\nimport './cards.css'\r\n\r\nexport default function Cards({cities, onClose}) {\r\n  if(cities){\r\n    return (\r\n      <div className='cards'>\r\n        {cities.map(c => <Card\r\n            max={c.max}\r\n            min={c.min}\r\n            name={c.name}\r\n            img={c.img}\r\n            onClose={() => onClose(c.id)}\r\n            id={c.id}\r\n          />)}\r\n      </div>\r\n    );\r\n  } else {\r\n    return(\r\n      <div className=\"vacio\">\r\n          To add a city, go to the text input on the navigation bar and write\r\n          the name of the city that you want to add and press the green button.\r\n        \r\n        \r\n          If you want to check the details of a city, just add it and then click\r\n          on its card.\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}","import React, { useState } from \"react\";\r\nimport './search.css';\r\nexport default function SearchBar({onSearch}) {\r\n  const [city, setCity] = useState(\"\");\r\n  return (\r\n    <form className=\"todo\"\r\n    onSubmit={(e) => {\r\n      e.preventDefault();\r\n      onSearch(city);\r\n    }}>\r\n      <input className=\"text\"\r\n        type=\"text\"\r\n        placeholder=\"Ciudad...\"\r\n        value={city}\r\n        onChange={e => setCity(e.target.value)}\r\n      />\r\n      <input  className=\"boton\" type=\"submit\" value=\"Agregar\" />\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\n// import Logo from '../logoHenry.png'\r\n// import SearchBar from './SearchBar.jsx';\r\n\r\nimport SearchBar from './SearchBar';\r\nimport  './Nav.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n   function Nav({onSearch}) {\r\n    return (\r\n      <nav className=\"nav\">\r\n        <Link to='/'>\r\n          <span className=\"navbar-brand\">\r\n          </span>\r\n        </Link>\r\n        <div className=\"aboutdiv\">\r\n        </div>\r\n        <div className=\"hola\">\r\n          <SearchBar\r\n            onSearch={onSearch} className=\"searchbar\"\r\n          />\r\n          </div>\r\n      </nav>\r\n    );\r\n  };\r\n  export default Nav","import React from \"react\";\r\nimport  './ciudad.css';\r\nexport default function Ciudad({city}) {\r\n    if (!city) {return(<div>(\"no encontrada\")</div>)}\r\n    else\r\n    return (\r\n        <div className=\"ciudad\">\r\n                <div className=\"container\">\r\n                    <h2>{city.name}</h2>\r\n                    <div className=\"info\">\r\n                        <div>Temperaturaüå°: {city.temp} ¬∫C</div>\r\n                        <div>Climaüåà: {city.weather}</div>\r\n                        <div>Vientoüí®: {city.wind} km/h</div>\r\n                        <div>Cantidad de nubes‚òÅ: {city.clouds}</div>\r\n                        <div>Latitudüß≠: {city.latitud}¬∫</div>\r\n                        <div>Longitudüß≠: {city.longitud}¬∫</div>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport './index.css';\r\nimport React, { useState } from 'react'\r\nimport Cards from './components/Cards.jsx';\r\nimport Nav from './components/Nav.jsx';\r\nimport { Route } from 'react-router-dom';\r\nimport Ciudad from './components/Ciudad.jsx';\r\nimport Swal from 'sweetalert'\r\n\r\n\r\nexport default function App() {\r\n   const [cities ,setCities] = useState([]);\r\n  function onSearch(city) {\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_API_KEY}&units=metric`)\r\n      .then(r => r.json())\r\n      .then((recurso) => {\r\n        if(recurso.main !== undefined){\r\n          const city = {\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon\r\n          };\r\n          var aux=cities.filter(ci => ci.id!== city.id)\r\n          if (cities.length!==aux.length) {\r\n            Swal({\r\n              icon: 'error',\r\n              title: 'Oops...',\r\n              text: 'The city you entered was already added',\r\n              footer: '<a href>Why do I have this issue?</a>'\r\n            })\r\n          }else{\r\n            setCities( [...aux, city]);\r\n          Swal({\r\n            title:'New city!',\r\n            text:city.name+ ' was added successfully!',\r\n            icon:'success',\r\n            timer:1000\r\n          })}\r\n        } else {\r\n          Swal({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text: 'The city you entered was not found!',\r\n            footer: '<a href>Why do I have this issue?</a>'\r\n          })\r\n        }\r\n      });\r\n    }\r\n      function onClose(id) {\r\n        setCities(cities.filter(c => c.id !== id));\r\n    }\r\n    function onFilter(ciudadId) {\r\n      let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\r\n      if(ciudad.length > 0) {\r\n          return ciudad[0];\r\n      } else {\r\n          return null;\r\n      }\r\n    }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n      <Route\r\n        path='/'\r\n        render={() => <Nav onSearch={onSearch} />}/>\r\n      </div>\r\n      <div>\r\n      <Route\r\n        exact path='/'\r\n        render={() => <Cards onClose={onClose} cities={cities}/> }/>\r\n      </div>\r\n      <div>\r\n      <Route\r\n  exact path='/ciudad/:ciudadId'\r\n  render={({match}) => <Ciudad city={onFilter(match.params.ciudadId)}/>}\r\n/>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n  );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\n"],"sourceRoot":""}